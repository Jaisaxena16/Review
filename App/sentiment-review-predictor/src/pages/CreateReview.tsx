import { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { Navbar } from "@/components/Navbar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Sparkles, ThumbsUp, ThumbsDown } from "lucide-react";
import { clothingItems, reviews } from "@/data/mockData";
import { predictRecommendation, RecommendationResult } from "@/utils/sentimentAnalysis";
import { toast } from "sonner";

const CreateReview = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [searchQuery, setSearchQuery] = useState("");
  
  const preselectedItemId = searchParams.get("itemId");
  const [selectedItemId, setSelectedItemId] = useState<string>(preselectedItemId || "");
  const [title, setTitle] = useState("");
  const [reviewText, setReviewText] = useState("");
  const [rating, setRating] = useState<string>("");
  const [age, setAge] = useState<string>("");
  const [predictedRecommendation, setPredictedRecommendation] = useState<0 | 1 | null>(null);
  const [predictionConfidence, setPredictionConfidence] = useState<number | null>(null);
  const [predictionSource, setPredictionSource] = useState<RecommendationResult["source"] | null>(null);
  const [manualRecommendation, setManualRecommendation] = useState<0 | 1 | null>(null);
  const [isPredicting, setIsPredicting] = useState(false);

  const selectedItem = clothingItems.find(i => i.id === Number(selectedItemId));

  useEffect(() => {
    setPredictedRecommendation(null);
    setManualRecommendation(null);
    setPredictionConfidence(null);
    setPredictionSource(null);
  }, [reviewText, rating]);

  const handlePredict = async () => {
    if (!reviewText || !rating) {
      toast.error("Please enter review text and rating first");
      return;
    }

    setIsPredicting(true);

    try {
      const result = await predictRecommendation(reviewText, Number(rating));
      setPredictedRecommendation(result.prediction);
      setManualRecommendation(result.prediction);
      setPredictionConfidence(result.confidence ?? null);
      setPredictionSource(result.source);

      toast.success(
        `Recommendation: ${result.prediction === 1 ? "Recommended" : "Not Recommended"}`,
        {
          description:
            result.source === "backend"
              ? "Prediction generated by the FastText + Logistic Regression model"
              : "Prediction generated using offline fallback heuristics",
        }
      );
    } catch (error) {
      console.error("Failed to generate prediction", error);
      toast.error("Unable to generate a recommendation", {
        description: "Please try again or adjust your review text."
      });
    } finally {
      setIsPredicting(false);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedItemId || !title || !reviewText || !rating) {
      toast.error("Please fill in all required fields");
      return;
    }

    if (manualRecommendation === null) {
      toast.error("Please generate a recommendation prediction first");
      return;
    }

    const newReview = {
      id: reviews.length + 1,
      clothingId: Number(selectedItemId),
      title,
      reviewText,
      rating: Number(rating),
      recommended: manualRecommendation,
      age: age ? Number(age) : undefined,
      createdAt: new Date().toISOString()
    };

    reviews.push(newReview);
    
    toast.success("Review submitted successfully!", {
      description: "Your review has been added and is now visible to other shoppers"
    });

    setTimeout(() => {
      navigate(`/product/${selectedItemId}`);
    }, 1500);
  };

  return (
    <div className="min-h-screen bg-background">
      <Navbar searchQuery={searchQuery} onSearchChange={setSearchQuery} />
      
      <div className="container mx-auto px-4 py-8">
        <Button
          variant="ghost"
          className="mb-6"
          onClick={() => navigate("/")}
        >
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Home
        </Button>

        <div className="max-w-2xl mx-auto">
          <Card>
            <CardHeader>
              <CardTitle className="text-3xl">Write a Review</CardTitle>
              <CardDescription>
                Share your experience with this product to help other shoppers
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="item">Select Item *</Label>
                  <Select value={selectedItemId} onValueChange={setSelectedItemId}>
                    <SelectTrigger>
                      <SelectValue placeholder="Choose a clothing item" />
                    </SelectTrigger>
                    <SelectContent>
                      {clothingItems.map((item) => (
                        <SelectItem key={item.id} value={item.id.toString()}>
                          {item.title} - {item.category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {selectedItem && (
                    <div className="flex items-center gap-3 p-3 bg-muted rounded-md mt-2">
                      <img
                        src={selectedItem.imageUrl}
                        alt={selectedItem.title}
                        className="h-16 w-16 object-cover rounded"
                      />
                      <div>
                        <p className="font-semibold">{selectedItem.title}</p>
                        <Badge variant="secondary">{selectedItem.category}</Badge>
                      </div>
                    </div>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="title">Review Title *</Label>
                  <Input
                    id="title"
                    placeholder="Sum up your experience in one line"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="review">Review Text *</Label>
                  <Textarea
                    id="review"
                    placeholder="Tell us about your experience with this item..."
                    rows={6}
                    value={reviewText}
                    onChange={(e) => setReviewText(e.target.value)}
                    required
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="rating">Rating *</Label>
                    <Select value={rating} onValueChange={setRating}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select rating" />
                      </SelectTrigger>
                      <SelectContent>
                        {[5, 4, 3, 2, 1].map((r) => (
                          <SelectItem key={r} value={r.toString()}>
                            {r} Star{r !== 1 ? "s" : ""}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="age">Your Age (Optional)</Label>
                    <Input
                      id="age"
                      type="number"
                      placeholder="e.g., 25"
                      value={age}
                      onChange={(e) => setAge(e.target.value)}
                      min="1"
                      max="120"
                    />
                  </div>
                </div>

                <div className="border-t pt-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-semibold flex items-center gap-2">
                          <Sparkles className="h-5 w-5 text-primary" />
                          AI Recommendation Prediction
                        </h3>
                        <p className="text-sm text-muted-foreground">
                          Our ML model will predict if you recommend this item
                        </p>
                      </div>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={handlePredict}
                        disabled={!reviewText || !rating || isPredicting}
                      >
                        {isPredicting ? "Generating..." : "Generate Prediction"}
                      </Button>
                    </div>

                    {predictedRecommendation !== null && (
                      <Card className="bg-muted/50">
                        <CardContent className="pt-6">
                          <div className="space-y-4">
                            <div className="space-y-2">
                              <div className="flex flex-wrap items-center gap-2">
                                <Label className="text-sm font-medium">Prediction:</Label>
                                <Badge
                                  variant={predictedRecommendation === 1 ? "default" : "secondary"}
                                >
                                  {predictedRecommendation === 1 ? (
                                    <><ThumbsUp className="h-3 w-3 mr-1" /> Recommended</>
                                  ) : (
                                    <><ThumbsDown className="h-3 w-3 mr-1" /> Not Recommended</>
                                  )}
                                </Badge>
                                {predictionSource && (
                                  <Badge variant="outline" className="uppercase tracking-wide">
                                    {predictionSource === "backend" ? "ML Model" : "Fallback"}
                                  </Badge>
                                )}
                              </div>
                              {predictionConfidence !== null && (
                                <p className="text-xs text-muted-foreground">
                                  Confidence: {(predictionConfidence * 100).toFixed(1)}%
                                </p>
                              )}
                            </div>

                            <div className="space-y-2">
                              <Label htmlFor="manual">
                                Override Prediction (Optional)
                              </Label>
                              <Select 
                                value={manualRecommendation?.toString()} 
                                onValueChange={(val) => setManualRecommendation(Number(val) as 0 | 1)}
                              >
                                <SelectTrigger>
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="1">
                                    <span className="flex items-center">
                                      <ThumbsUp className="h-4 w-4 mr-2" />
                                      Recommended
                                    </span>
                                  </SelectItem>
                                  <SelectItem value="0">
                                    <span className="flex items-center">
                                      <ThumbsDown className="h-4 w-4 mr-2" />
                                      Not Recommended
                                    </span>
                                  </SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    )}
                  </div>
                </div>

                <Button type="submit" size="lg" className="w-full">
                  Submit Review
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default CreateReview;
